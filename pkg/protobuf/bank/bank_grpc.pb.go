// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: bank.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_CreateWallet_FullMethodName = "/bank.WalletService/CreateWallet"
	WalletService_GetWallets_FullMethodName   = "/bank.WalletService/GetWallets"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Wallet Service
type WalletServiceClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*GetWalletsResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, WalletService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*GetWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletsResponse)
	err := c.cc.Invoke(ctx, WalletService_GetWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
//
// Wallet Service
type WalletServiceServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServiceServer) GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallets not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWallets(ctx, req.(*GetWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _WalletService_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallets",
			Handler:    _WalletService_GetWallets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank.proto",
}

const (
	FactorService_CreateFactor_FullMethodName = "/bank.FactorService/CreateFactor"
	FactorService_ApplyFactor_FullMethodName  = "/bank.FactorService/ApplyFactor"
	FactorService_GetFactors_FullMethodName   = "/bank.FactorService/GetFactors"
)

// FactorServiceClient is the client API for FactorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Factor Service
type FactorServiceClient interface {
	CreateFactor(ctx context.Context, in *CreateFactorRequest, opts ...grpc.CallOption) (*CreateFactorResponse, error)
	ApplyFactor(ctx context.Context, in *ApplyFactorRequest, opts ...grpc.CallOption) (*ApplyFactorResponse, error)
	GetFactors(ctx context.Context, in *GetFactorsRequest, opts ...grpc.CallOption) (*GetFactorsResponse, error)
}

type factorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFactorServiceClient(cc grpc.ClientConnInterface) FactorServiceClient {
	return &factorServiceClient{cc}
}

func (c *factorServiceClient) CreateFactor(ctx context.Context, in *CreateFactorRequest, opts ...grpc.CallOption) (*CreateFactorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFactorResponse)
	err := c.cc.Invoke(ctx, FactorService_CreateFactor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factorServiceClient) ApplyFactor(ctx context.Context, in *ApplyFactorRequest, opts ...grpc.CallOption) (*ApplyFactorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyFactorResponse)
	err := c.cc.Invoke(ctx, FactorService_ApplyFactor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factorServiceClient) GetFactors(ctx context.Context, in *GetFactorsRequest, opts ...grpc.CallOption) (*GetFactorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFactorsResponse)
	err := c.cc.Invoke(ctx, FactorService_GetFactors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactorServiceServer is the server API for FactorService service.
// All implementations must embed UnimplementedFactorServiceServer
// for forward compatibility.
//
// Factor Service
type FactorServiceServer interface {
	CreateFactor(context.Context, *CreateFactorRequest) (*CreateFactorResponse, error)
	ApplyFactor(context.Context, *ApplyFactorRequest) (*ApplyFactorResponse, error)
	GetFactors(context.Context, *GetFactorsRequest) (*GetFactorsResponse, error)
	mustEmbedUnimplementedFactorServiceServer()
}

// UnimplementedFactorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFactorServiceServer struct{}

func (UnimplementedFactorServiceServer) CreateFactor(context.Context, *CreateFactorRequest) (*CreateFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFactor not implemented")
}
func (UnimplementedFactorServiceServer) ApplyFactor(context.Context, *ApplyFactorRequest) (*ApplyFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFactor not implemented")
}
func (UnimplementedFactorServiceServer) GetFactors(context.Context, *GetFactorsRequest) (*GetFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactors not implemented")
}
func (UnimplementedFactorServiceServer) mustEmbedUnimplementedFactorServiceServer() {}
func (UnimplementedFactorServiceServer) testEmbeddedByValue()                       {}

// UnsafeFactorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactorServiceServer will
// result in compilation errors.
type UnsafeFactorServiceServer interface {
	mustEmbedUnimplementedFactorServiceServer()
}

func RegisterFactorServiceServer(s grpc.ServiceRegistrar, srv FactorServiceServer) {
	// If the following call pancis, it indicates UnimplementedFactorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FactorService_ServiceDesc, srv)
}

func _FactorService_CreateFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactorServiceServer).CreateFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FactorService_CreateFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactorServiceServer).CreateFactor(ctx, req.(*CreateFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FactorService_ApplyFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactorServiceServer).ApplyFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FactorService_ApplyFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactorServiceServer).ApplyFactor(ctx, req.(*ApplyFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FactorService_GetFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactorServiceServer).GetFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FactorService_GetFactors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactorServiceServer).GetFactors(ctx, req.(*GetFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FactorService_ServiceDesc is the grpc.ServiceDesc for FactorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FactorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.FactorService",
	HandlerType: (*FactorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFactor",
			Handler:    _FactorService_CreateFactor_Handler,
		},
		{
			MethodName: "ApplyFactor",
			Handler:    _FactorService_ApplyFactor_Handler,
		},
		{
			MethodName: "GetFactors",
			Handler:    _FactorService_GetFactors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.1
// source: factor.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Factor message
type FactorType int32

const (
	FactorType_FACTOR_TYPE_UNKNOWN    FactorType = 0
	FactorType_FACTOR_TYPE_SIMPLE     FactorType = 1
	FactorType_FACTOR_TYPE_AGGREGATED FactorType = 2
)

// Enum value maps for FactorType.
var (
	FactorType_name = map[int32]string{
		0: "FACTOR_TYPE_UNKNOWN",
		1: "FACTOR_TYPE_SIMPLE",
		2: "FACTOR_TYPE_AGGREGATED",
	}
	FactorType_value = map[string]int32{
		"FACTOR_TYPE_UNKNOWN":    0,
		"FACTOR_TYPE_SIMPLE":     1,
		"FACTOR_TYPE_AGGREGATED": 2,
	}
)

func (x FactorType) Enum() *FactorType {
	p := new(FactorType)
	*p = x
	return p
}

func (x FactorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FactorType) Descriptor() protoreflect.EnumDescriptor {
	return file_factor_proto_enumTypes[0].Descriptor()
}

func (FactorType) Type() protoreflect.EnumType {
	return &file_factor_proto_enumTypes[0]
}

func (x FactorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FactorType.Descriptor instead.
func (FactorType) EnumDescriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{0}
}

// Response status
type ResponseStatus int32

const (
	ResponseStatus_SUCCESS ResponseStatus = 0
	ResponseStatus_FAILURE ResponseStatus = 1
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	ResponseStatus_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_factor_proto_enumTypes[1].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_factor_proto_enumTypes[1]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{1}
}

type Factor struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                // UUID of the factor
	SourceService  string                 `protobuf:"bytes,2,opt,name=source_service,json=sourceService,proto3" json:"source_service,omitempty"`     // Service generating the factor
	ExternalId     string                 `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`              // Unique ID in the source service
	BookingId      string                 `protobuf:"bytes,4,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`                 // Associated booking ID
	TotalAmount    uint64                 `protobuf:"varint,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`          // Total amount for the factor
	Distributions  []*Distribution        `protobuf:"bytes,6,rep,name=distributions,proto3" json:"distributions,omitempty"`                          // Amount distribution information
	Details        string                 `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`                                      // JSON-encoded details.
	InstantPayment bool                   `protobuf:"varint,8,opt,name=instant_payment,json=instantPayment,proto3" json:"instant_payment,omitempty"` // Should the payment be made instantly?
	IsPaid         bool                   `protobuf:"varint,9,opt,name=is_paid,json=isPaid,proto3" json:"is_paid,omitempty"`                         // Has the factor been paid?
	CreatedAt      string                 `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                // Timestamp when the factor was created
	UpdatedAt      string                 `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                // Timestamp when the factor was last updated
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Factor) Reset() {
	*x = Factor{}
	mi := &file_factor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Factor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Factor) ProtoMessage() {}

func (x *Factor) ProtoReflect() protoreflect.Message {
	mi := &file_factor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Factor.ProtoReflect.Descriptor instead.
func (*Factor) Descriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{0}
}

func (x *Factor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Factor) GetSourceService() string {
	if x != nil {
		return x.SourceService
	}
	return ""
}

func (x *Factor) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *Factor) GetBookingId() string {
	if x != nil {
		return x.BookingId
	}
	return ""
}

func (x *Factor) GetTotalAmount() uint64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Factor) GetDistributions() []*Distribution {
	if x != nil {
		return x.Distributions
	}
	return nil
}

func (x *Factor) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Factor) GetInstantPayment() bool {
	if x != nil {
		return x.InstantPayment
	}
	return false
}

func (x *Factor) GetIsPaid() bool {
	if x != nil {
		return x.IsPaid
	}
	return false
}

func (x *Factor) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Factor) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Distribution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // UUID of the user to receive the amount
	Amount        uint64                 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`              // Amount to be transferred to this user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Distribution) Reset() {
	*x = Distribution{}
	mi := &file_factor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Distribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distribution) ProtoMessage() {}

func (x *Distribution) ProtoReflect() protoreflect.Message {
	mi := &file_factor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distribution.ProtoReflect.Descriptor instead.
func (*Distribution) Descriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{1}
}

func (x *Distribution) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Distribution) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Request to create a factor
type CreateFactorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FactorType    FactorType             `protobuf:"varint,1,opt,name=factor_type,json=factorType,proto3,enum=factor.FactorType" json:"factor_type,omitempty"` // Type of the factor (simple or aggregated)
	Factor        *Factor                `protobuf:"bytes,2,opt,name=factor,proto3" json:"factor,omitempty"`                                                   // Factor details
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFactorRequest) Reset() {
	*x = CreateFactorRequest{}
	mi := &file_factor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFactorRequest) ProtoMessage() {}

func (x *CreateFactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFactorRequest.ProtoReflect.Descriptor instead.
func (*CreateFactorRequest) Descriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFactorRequest) GetFactorType() FactorType {
	if x != nil {
		return x.FactorType
	}
	return FactorType_FACTOR_TYPE_UNKNOWN
}

func (x *CreateFactorRequest) GetFactor() *Factor {
	if x != nil {
		return x.Factor
	}
	return nil
}

// Response for creating a factor
type CreateFactorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ResponseStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=factor.ResponseStatus" json:"status,omitempty"` // SUCCESS or FAILURE
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                           // Optional response message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFactorResponse) Reset() {
	*x = CreateFactorResponse{}
	mi := &file_factor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFactorResponse) ProtoMessage() {}

func (x *CreateFactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFactorResponse.ProtoReflect.Descriptor instead.
func (*CreateFactorResponse) Descriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFactorResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_SUCCESS
}

func (x *CreateFactorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request to apply and distribute a factor
type ApplyFactorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FactorId      string                 `protobuf:"bytes,1,opt,name=factor_id,json=factorId,proto3" json:"factor_id,omitempty"` // UUID of the factor to be applied
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyFactorRequest) Reset() {
	*x = ApplyFactorRequest{}
	mi := &file_factor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyFactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFactorRequest) ProtoMessage() {}

func (x *ApplyFactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFactorRequest.ProtoReflect.Descriptor instead.
func (*ApplyFactorRequest) Descriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyFactorRequest) GetFactorId() string {
	if x != nil {
		return x.FactorId
	}
	return ""
}

// Response for applying a factor
type ApplyFactorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ResponseStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=factor.ResponseStatus" json:"status,omitempty"` // SUCCESS or FAILURE
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                           // Optional response message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyFactorResponse) Reset() {
	*x = ApplyFactorResponse{}
	mi := &file_factor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyFactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFactorResponse) ProtoMessage() {}

func (x *ApplyFactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFactorResponse.ProtoReflect.Descriptor instead.
func (*ApplyFactorResponse) Descriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{5}
}

func (x *ApplyFactorResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_SUCCESS
}

func (x *ApplyFactorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request to get factors by ID or filters
type GetFactorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FactorId      string                 `protobuf:"bytes,1,opt,name=factor_id,json=factorId,proto3" json:"factor_id,omitempty"`    // Optional specific factor ID
	BookingId     string                 `protobuf:"bytes,2,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"` // Optional filter by booking ID
	IsPaid        bool                   `protobuf:"varint,3,opt,name=is_paid,json=isPaid,proto3" json:"is_paid,omitempty"`         // Optional filter by payment status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFactorsRequest) Reset() {
	*x = GetFactorsRequest{}
	mi := &file_factor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFactorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactorsRequest) ProtoMessage() {}

func (x *GetFactorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactorsRequest.ProtoReflect.Descriptor instead.
func (*GetFactorsRequest) Descriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{6}
}

func (x *GetFactorsRequest) GetFactorId() string {
	if x != nil {
		return x.FactorId
	}
	return ""
}

func (x *GetFactorsRequest) GetBookingId() string {
	if x != nil {
		return x.BookingId
	}
	return ""
}

func (x *GetFactorsRequest) GetIsPaid() bool {
	if x != nil {
		return x.IsPaid
	}
	return false
}

// Response for getting factors
type GetFactorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ResponseStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=factor.ResponseStatus" json:"status,omitempty"` // SUCCESS or FAILURE
	Factors       []*Factor              `protobuf:"bytes,2,rep,name=factors,proto3" json:"factors,omitempty"`                           // List of matching factors
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFactorsResponse) Reset() {
	*x = GetFactorsResponse{}
	mi := &file_factor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFactorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactorsResponse) ProtoMessage() {}

func (x *GetFactorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactorsResponse.ProtoReflect.Descriptor instead.
func (*GetFactorsResponse) Descriptor() ([]byte, []int) {
	return file_factor_proto_rawDescGZIP(), []int{7}
}

func (x *GetFactorsResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_SUCCESS
}

func (x *GetFactorsResponse) GetFactors() []*Factor {
	if x != nil {
		return x.Factors
	}
	return nil
}

var File_factor_proto protoreflect.FileDescriptor

var file_factor_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xf8, 0x02, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50,
	0x61, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x3f, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x72, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x13, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x50, 0x61, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x07,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2a, 0x59, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0x2a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x32, 0xe7, 0x01,
	0x0a, 0x0d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x49, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1b, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x2e, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x19, 0x2e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x17, 0x5a, 0x15, 0x67, 0x68, 0x6f, 0x6c, 0x69,
	0x2d, 0x66, 0x6c, 0x79, 0x2d, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_factor_proto_rawDescOnce sync.Once
	file_factor_proto_rawDescData = file_factor_proto_rawDesc
)

func file_factor_proto_rawDescGZIP() []byte {
	file_factor_proto_rawDescOnce.Do(func() {
		file_factor_proto_rawDescData = protoimpl.X.CompressGZIP(file_factor_proto_rawDescData)
	})
	return file_factor_proto_rawDescData
}

var file_factor_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_factor_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_factor_proto_goTypes = []any{
	(FactorType)(0),              // 0: factor.FactorType
	(ResponseStatus)(0),          // 1: factor.ResponseStatus
	(*Factor)(nil),               // 2: factor.Factor
	(*Distribution)(nil),         // 3: factor.Distribution
	(*CreateFactorRequest)(nil),  // 4: factor.CreateFactorRequest
	(*CreateFactorResponse)(nil), // 5: factor.CreateFactorResponse
	(*ApplyFactorRequest)(nil),   // 6: factor.ApplyFactorRequest
	(*ApplyFactorResponse)(nil),  // 7: factor.ApplyFactorResponse
	(*GetFactorsRequest)(nil),    // 8: factor.GetFactorsRequest
	(*GetFactorsResponse)(nil),   // 9: factor.GetFactorsResponse
}
var file_factor_proto_depIdxs = []int32{
	3,  // 0: factor.Factor.distributions:type_name -> factor.Distribution
	0,  // 1: factor.CreateFactorRequest.factor_type:type_name -> factor.FactorType
	2,  // 2: factor.CreateFactorRequest.factor:type_name -> factor.Factor
	1,  // 3: factor.CreateFactorResponse.status:type_name -> factor.ResponseStatus
	1,  // 4: factor.ApplyFactorResponse.status:type_name -> factor.ResponseStatus
	1,  // 5: factor.GetFactorsResponse.status:type_name -> factor.ResponseStatus
	2,  // 6: factor.GetFactorsResponse.factors:type_name -> factor.Factor
	4,  // 7: factor.FactorService.CreateFactor:input_type -> factor.CreateFactorRequest
	6,  // 8: factor.FactorService.ApplyFactor:input_type -> factor.ApplyFactorRequest
	8,  // 9: factor.FactorService.GetFactors:input_type -> factor.GetFactorsRequest
	5,  // 10: factor.FactorService.CreateFactor:output_type -> factor.CreateFactorResponse
	7,  // 11: factor.FactorService.ApplyFactor:output_type -> factor.ApplyFactorResponse
	9,  // 12: factor.FactorService.GetFactors:output_type -> factor.GetFactorsResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_factor_proto_init() }
func file_factor_proto_init() {
	if File_factor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_factor_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_factor_proto_goTypes,
		DependencyIndexes: file_factor_proto_depIdxs,
		EnumInfos:         file_factor_proto_enumTypes,
		MessageInfos:      file_factor_proto_msgTypes,
	}.Build()
	File_factor_proto = out.File
	file_factor_proto_rawDesc = nil
	file_factor_proto_goTypes = nil
	file_factor_proto_depIdxs = nil
}
